{"version":3,"sources":["img/logo-chuck.png","globalStyle/style.js","app.js","service/HttpService.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","__webpack_require__","p","GlobalStyle","createGlobalStyle","_templateObject","Container","styled","section","_templateObject2","Hero","div","_templateObject3","Img","img","_templateObject4","Title","h1","_templateObject5","Name","span","_templateObject6","Menu","ul","_templateObject7","Item","li","_templateObject8","Section","_templateObject9","Joke","_templateObject10","Category","_templateObject11","Next","_templateObject12","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","categories","joke","key","_this2","fetch","then","res","json","setState","name","_this3","concat","getJoke","props","dispatch","lastCategory","type","_this4","react_default","a","createElement","src","Logo","alt","map","item","className","onClick","metodoClick","category","value","Component","connect","Boolean","window","location","hostname","match","arguments","length","undefined","action","store","createStore","reducers","ReactDOM","render","es","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d97bad28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-chuck.1dd8e68b.png\";","import styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin:0 auto;\r\n    @import url('https://fonts.googleapis.com/css?family=Kalam|Roboto:400,500i,700&display=swap');\r\n  }\r\n`\r\n\r\nexport const Container = styled.section`\r\n    background-color: #323c5c;\r\n    padding: 17px 0;\r\n    min-height:98vh;\r\n`;\r\n\r\nexport const Hero = styled.div`\r\n    max-width:900px;\r\n    margin: 0 auto;\r\n`\r\n\r\nexport const Img = styled.img`\r\n    display:block;\r\n    margin:0 auto;\r\n`\r\n\r\nexport const Title = styled.h1`\r\n    font-family: 'Kalam', cursive;\r\n    color: #ffe000;\r\n    font-size: 25px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    @media screen and (min-width: 992px) {\r\n        font-size: 35px;\r\n    }\r\n`\r\n\r\nexport const Name = styled.span`\r\n    display: block;\r\n    color: #ff0000;\r\n    font-size: 30px;\r\n    padding-left: 9%;\r\n    @media screen and (min-width: 992px) {\r\n        font-size: 60px;\r\n    }\r\n`\r\n\r\nexport const Menu = styled.ul`\r\n    list-style:none;\r\n    display:flex;\r\n    flex-wrap:wrap;\r\n    max-width:100%;\r\n    justify-content:center;\r\n    aling-itens:center;\r\n    padding:0;\r\n`\r\n\r\nexport const Item = styled.li`\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size:20px;\r\n    color: #fff;\r\n    background-color: #323c5c;\r\n    padding: 5px 10px;\r\n    text-transform:uppercase;\r\n    font-weight:bold;\r\n    cursor: pointer;\r\n    transition: 0.5s;\r\n    position:relative;\r\n    &:hover{\r\n        color: #ffe000;\r\n    }\r\n    &:before {\r\n        content: \"\";\r\n        background: #ffe000;\r\n        width: 0;\r\n        height: 1px;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left:0;\r\n        rigth:0;\r\n        transition: 0.5s;\r\n    }\r\n    &:hover:before {\r\n        content: \"\";\r\n        width: 100%;\r\n    }\r\n    &.active{\r\n        color: #ffe000;\r\n        :before {\r\n            content: \"\";\r\n            width: 100%;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Section = styled.div`\r\n    font-family: 'Roboto',sans-serif;\r\n    max-width: 95%;\r\n    margin: 50px auto;\r\n    width: 500px;\r\n`;\r\n\r\nexport const Joke = styled.div`\r\n    color:#fff;\r\n    padding:30px;\r\n    text-align:center;\r\n    font-size:25px;\r\n    font-weight:400;\r\n    border:2px solid #f00;\r\n`;\r\n\r\nexport const Category = styled.p`\r\n    width: 500px;\r\n    max-width: 95%;\r\n    color: #fff;\r\n    text-align: center;\r\n    border: 1px solid #fff;\r\n    padding: 7px 0;\r\n    text-transform: uppercase;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n    margin: 45px auto;\r\n`;\r\n\r\nexport const Next = styled.p`\r\n    width: 100px;\r\n    float: right;\r\n    color: #f00;\r\n    text-align: center;\r\n    border: 1px solid #f00;\r\n    padding: 7px;\r\n    text-transform: uppercase;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n    &:hover{\r\n        color: #fff;\r\n        background-color:#f00;\r\n    }\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, getJoke } from './service/HttpService';\r\nimport Logo from \"./img/logo-chuck.png\";\r\nimport {\r\n  GlobalStyle,\r\n  Container,\r\n  Hero,\r\n  Img,\r\n  Title,\r\n  Name,\r\n  Menu,\r\n  Item,\r\n  Section,\r\n  Joke,\r\n  Category,\r\n  Next\r\n} from \"./globalStyle/style\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      categories: [],\r\n      joke:'',\r\n      key:'',\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    getCategory()\r\n    .then(res => this.setState({ categories: res }))\r\n  }\r\n\r\n  metodoClick(name){\r\n    getJoke(name)\r\n    .then(res => this.setState({ joke: res }))\r\n    this.props.dispatch({\r\n      lastCategory :name,\r\n      type : 'ADDSTATE',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <GlobalStyle />\r\n        <Hero>\r\n          <Img src={Logo} alt=\"logo\"/>\r\n          <Title>Gerador de Piadas <Name>Chuck Norris</Name></Title>\r\n          <Menu>\r\n            {\r\n              this.state.categories.map((item, key) => {\r\n                return(\r\n                  <Item\r\n                  className = { this.state.key === key ? 'active' : '' }\r\n                  key={key} \r\n                  onClick={() =>{\r\n                    this.metodoClick(item , key)\r\n                    return this.setState({key:key})\r\n                    }\r\n                  }\r\n                  >{item}</Item>\r\n                )\r\n              }\r\n              )}\r\n          </Menu>\r\n          <Category>{`VocÃª Esta na Categoria : ${this.props.category}`}</Category>\r\n          <Section>\r\n              <Joke>{this.state.joke.value ? this.state.joke.value : \"Selecione uma Categoria\" }</Joke>\r\n              <Next onClick={() => this.metodoClick(this.state.joke.categories[0])} >Proxima</Next>\r\n          </Section>\r\n          </Hero>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    category: state\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App); ","    \r\nexport const getCategory = () => {\r\n    return(\r\n        fetch(`https://api.chucknorris.io/jokes/categories`)\r\n        .then(res => res.json())\r\n    )\r\n}\r\n\r\nexport const getJoke = (name) => {\r\n    return(\r\n        fetch(`https://api.chucknorris.io/jokes/random?category=${name}`)\r\n        .then(res => res.json())\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const Category = (state ='Nenhuma', action ) =>{\r\n    switch (action.type){\r\n      case 'ADDSTATE' : return state = action.lastCategory;\r\n    }\r\n    return state\r\n  }\r\n  \r\n  export default Category;","import { createStore } from 'redux';\r\nimport reducers from '../reducers';\r\nconst store = createStore(reducers);\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}