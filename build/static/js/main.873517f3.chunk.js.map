{"version":3,"sources":["img/logo-chuck.png","globalStyle/style.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GlobalStyle","createGlobalStyle","_templateObject","Container","styled","section","_templateObject2","Hero","div","_templateObject3","Img","img","_templateObject4","Title","h1","_templateObject5","Name","span","_templateObject6","Menu","ul","_templateObject7","Item","li","_templateObject8","Section","_templateObject9","Joke","_templateObject10","Next","_templateObject11","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","categories","joke","key","_this2","fetch","then","res","json","setState","name","_this3","concat","_this4","react_default","a","createElement","src","Logo","alt","map","item","className","onClick","metodoClick","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wgGCGjC,IAAMC,EAAcC,YAAHC,KAOXC,EAAYC,IAAOC,QAAVC,KAMTC,EAAOH,IAAOI,IAAVC,KAKJC,EAAMN,IAAOO,IAAVC,KAKHC,EAAQT,IAAOU,GAAVC,KAWLC,EAAOZ,IAAOa,KAAVC,KAUJC,EAAOf,IAAOgB,GAAVC,KAUJC,EAAOlB,IAAOmB,GAAVC,KAuCJC,EAAUrB,IAAOI,IAAVkB,KAOPC,EAAOvB,IAAOI,IAAVoB,KASJC,EAAOzB,IAAOL,EAAV+B,KCtCFC,cAxDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,WAAY,GACZC,KAAK,GACLC,IAAI,IALMV,oFASO,IAAAW,EAAAR,KACnBS,MAAK,+CACJC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAIH,EAAKK,SAAS,CAAER,WAAYM,0CAI/BG,GAAK,IAAAC,EAAAf,KACfS,MAAK,oDAAAO,OAAqDF,IACzDJ,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAII,EAAKF,SAAS,CAAEP,KAAMK,uCAG5B,IAAAM,EAAAjB,KACP,OACEkB,EAAAC,EAAAC,cAACpD,EAAD,KACEkD,EAAAC,EAAAC,cAACvD,EAAD,MACAqD,EAAAC,EAAAC,cAAChD,EAAD,KACE8C,EAAAC,EAAAC,cAAC7C,EAAD,CAAK8C,IAAKC,IAAMC,IAAI,SACpBL,EAAAC,EAAAC,cAAC1C,EAAD,0BAAyBwC,EAAAC,EAAAC,cAACvC,EAAD,sBACzBqC,EAAAC,EAAAC,cAACpC,EAAD,KAEIgB,KAAKI,MAAMC,WAAWmB,IAAI,SAACC,EAAMlB,GAC/B,OACEW,EAAAC,EAAAC,cAACjC,EAAD,CACAuC,UAAcT,EAAKb,MAAMG,MAAQA,EAAM,SAAW,GAClDA,IAAKA,EACLoB,QAAS,WAEP,OADAV,EAAKW,YAAYH,EAAOlB,GACjBU,EAAKJ,SAAS,CAACN,IAAIA,MAG1BkB,MAKVP,EAAAC,EAAAC,cAAC9B,EAAD,KACI4B,EAAAC,EAAAC,cAAC5B,EAAD,KAAOQ,KAAKI,MAAME,KAAKuB,MAAQ7B,KAAKI,MAAME,KAAKuB,MAAQ,2BACvDX,EAAAC,EAAAC,cAAC1B,EAAD,CAAMiC,QAAS,kBAAMV,EAAKW,YAAYX,EAAKb,MAAME,KAAKD,WAAW,MAAjE,qBAlDIyB,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.873517f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-chuck.1dd8e68b.png\";","import styled from 'styled-components';\r\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin:0 auto;\r\n    @import url('https://fonts.googleapis.com/css?family=Kalam|Roboto:400,500i,700&display=swap');\r\n  }\r\n`\r\n\r\nexport const Container = styled.section`\r\n    background-color: #323c5c;\r\n    padding: 17px 0;\r\n    min-height:98vh;\r\n`;\r\n\r\nexport const Hero = styled.div`\r\n    max-width:900px;\r\n    margin: 0 auto;\r\n`\r\n\r\nexport const Img = styled.img`\r\n    display:block;\r\n    margin:0 auto;\r\n`\r\n\r\nexport const Title = styled.h1`\r\n    font-family: 'Kalam', cursive;\r\n    color: #ffe000;\r\n    font-size: 25px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    @media screen and (min-width: 992px) {\r\n        font-size: 35px;\r\n    }\r\n`\r\n\r\nexport const Name = styled.span`\r\n    display: block;\r\n    color: #ff0000;\r\n    font-size: 30px;\r\n    padding-left: 9%;\r\n    @media screen and (min-width: 992px) {\r\n        font-size: 60px;\r\n    }\r\n`\r\n\r\nexport const Menu = styled.ul`\r\n    list-style:none;\r\n    display:flex;\r\n    flex-wrap:wrap;\r\n    max-width:100%;\r\n    justify-content:center;\r\n    aling-itens:center;\r\n    padding:0;\r\n`\r\n\r\nexport const Item = styled.li`\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size:20px;\r\n    color: #fff;\r\n    background-color: #323c5c;\r\n    padding: 10px;\r\n    margin: 2px 0;\r\n    text-transform:uppercase;\r\n    font-weight:bold;\r\n    cursor: pointer;\r\n    transition: 0.5s;\r\n    position:relative;\r\n    &:hover{\r\n        color: #ffe000;\r\n    }\r\n    &:before {\r\n        content: \"\";\r\n        background: #ffe000;\r\n        width: 0;\r\n        height: 1px;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left:0;\r\n        rigth:0;\r\n        transition: 0.5s;\r\n    }\r\n    &:hover:before {\r\n        content: \"\";\r\n        width: 100%;\r\n    }\r\n    &.active{\r\n        color: #ffe000;\r\n        :before {\r\n            content: \"\";\r\n            width: 100%;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Section = styled.div`\r\n    font-family: 'Roboto',sans-serif;\r\n    max-width: 95%;\r\n    margin: 50px auto;\r\n    width: 500px;\r\n`;\r\n\r\nexport const Joke = styled.div`\r\n    color:#fff;\r\n    padding:30px;\r\n    text-align:center;\r\n    font-size:25px;\r\n    font-weight:400;\r\n    border:2px solid #f00;\r\n`;\r\n\r\nexport const Next = styled.p`\r\n    width: 100px;\r\n    float: right;\r\n    color: #f00;\r\n    text-align: center;\r\n    border: 1px solid #f00;\r\n    padding: 7px;\r\n    text-transform: uppercase;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n    &:hover{\r\n        color: #fff;\r\n        background-color:#f00;\r\n    }\r\n`;\r\n","import React, { Component } from 'react';\nimport Logo from \"./img/logo-chuck.png\";\nimport {\n  GlobalStyle,\n  Container,\n  Hero,\n  Img,\n  Title,\n  Name,\n  Menu,\n  Item,\n  Section,\n  Joke,\n  Next\n} from \"./globalStyle/style\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      categories: [],\n      joke:'',\n      key:'',\n    }\n  }\n\n  componentWillMount() {\n    fetch(`https://api.chucknorris.io/jokes/categories`)\n    .then(res => res.json())\n    .then(res => this.setState({ categories: res }))\n    \n  }\n\n  metodoClick(name){\n    fetch(`https://api.chucknorris.io/jokes/random?category=${name}`)\n    .then(res => res.json())\n    .then(res => this.setState({ joke: res }))\n  }\n\n  render() {\n    return (\n      <Container>\n        <GlobalStyle />\n        <Hero>\n          <Img src={Logo} alt=\"logo\"/>\n          <Title>Gerador de Piadas <Name>Chuck Norris</Name></Title>\n          <Menu>\n            {\n              this.state.categories.map((item, key) => {\n                return(\n                  <Item\n                  className = { this.state.key === key ? 'active' : '' }\n                  key={key} \n                  onClick={() =>{\n                    this.metodoClick(item , key)\n                    return this.setState({key:key})\n                    }\n                  }\n                  >{item}</Item>\n                )\n              }\n              )}\n          </Menu>\n          <Section>\n              <Joke>{this.state.joke.value ? this.state.joke.value : \"Selecione uma Categoria\" }</Joke>\n              <Next onClick={() => this.metodoClick(this.state.joke.categories[0])} >Proxima</Next>\n          </Section>\n          </Hero>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}